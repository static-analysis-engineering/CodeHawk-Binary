{
  "name": "cfgcomparisons",
  "title": "json result file for the relational compare cfgs command",
  "type": "object",
  "required": [
    "meta"
  ],
  "properties": {
    "meta": {
      "description": "CodeHawk json result metadata",
      "type": "object",
      "required": [
        "status",
        "date",
        "time",
        "version"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "ok",
            "fail"
          ],
          "description": "indication if data gathering was successful"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "date (YYYY-MM-DD) of result"
        },
        "time": {
          "type": "string",
          "description": "time (HH:MM:SS) of result"
        },
        "schema": {
          "type": "string",
          "enum": [
            "cfgcomparisons"
          ],
          "description": "name of json result schema"
        },
        "version": {
          "type": "string",
          "description": "CodeHawk-Binary version number"
        },
        "reason": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "content": {
      "name": "cfgcomparisons",
      "title": "list of cfg comparisons",
      "description": "list of cfg comparisons",
      "type": "object",
      "properties": {
        "functions-changed": {
          "type": "array",
          "description": "list of cfg comparisons for functions changed",
          "items": {
            "$ref": "#/$defs/cfgcomparison"
          }
        }
      }
    }
  },
  "$defs": {
    "cfgcomparison": {
      "name": "cfgcomparison",
      "title": "cfgs of original and patched function",
      "description": "cfgs of original and patched function marked with changes",
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "trampoline"
            ]
          }
        },
        "cfg1": {
          "$ref": "#/$defs/controlflowgraph"
        },
        "cfg2": {
          "$ref": "#/$defs/controlflowgraph"
        },
        "cfg-block-mapping": {
          "type": "array",
          "description": "mapping of blocks in cfg1 and sets of blocks in cfg2",
          "items": {
            "$ref": "#/$defs/cfgblockmappingitem"
          }
        }
      }
    },
    "controlflowgraph": {
      "name": "controlflowgraph",
      "title": "control flow graph",
      "description": "Graph representation of the control flow of a function",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "(optional) name of the function from symbol information  or user-provided"
        },
        "faddr": {
          "type": "string",
          "description": "hexaddress of function entry point. Note that this address  is not necessarily the lowest address of the function."
        },
        "md5hash": {
          "type": "string",
          "description": "md5 hash of the hex-encoded bytes of the function instructions"
        },
        "nodes": {
          "type": "array",
          "description": "list of basic block nodes constituting the function",
          "items": {
            "$ref": "#/$defs/cfgnode"
          }
        },
        "edges": {
          "type": "array",
          "description": "list of edges between the nodes",
          "items": {
            "$ref": "#/$defs/cfgedge"
          }
        }
      }
    },
    "cfgnode": {
      "name": "cfgnode",
      "title": "node in a control flow graph identified by its hex starting address",
      "description": "All information associated with a node in the cfg",
      "type": "object",
      "required": [
        "baddr",
        "code"
      ],
      "properties": {
        "baddr": {
          "type": "string",
          "description": "hexaddress of the first instruction in the basic block"
        },
        "code": {
          "$ref": "#/$defs/assemblyblock"
        },
        "nesting-level": {
          "type": "integer",
          "description": "loop depth of the node in the control flow graph"
        }
      }
    },
    "assemblyblock": {
      "name": "assemblyblock",
      "title": "assembly block",
      "description": "Range of instructions within a function that form a basic block",
      "type": "object",
      "required": [
        "startaddr",
        "endaddr"
      ],
      "properties": {
        "startaddr": {
          "type": "string",
          "description": "hexaddress of the first instruction of the block"
        },
        "endaddr": {
          "type": "string",
          "description": "hexaddress of the (syntactically) last instruction of the block. Note that this would be the address of the delay slot for a MIPS assembly block, which is not the last instruction to be executed"
        },
        "instructions": {
          "type": "array",
          "description": "list of assembly instructions contained in the block",
          "items": {
            "$ref": "#/$defs/assemblyinstruction"
          }
        }
      }
    },
    "assemblyinstruction": {
      "name": "assemblyinstruction",
      "title": "assembly instruction",
      "description": "Single assembly instruction at a given address within a function annotated with analysis information",
      "type": "object",
      "required": [
        "addr",
        "bytes",
        "opcode",
        "annotation"
      ],
      "properties": {
        "addr": {
          "type": "array",
          "description": "list of context addresses within the function instruction address last",
          "items": {
            "type": "string",
            "description": "hex address"
          }
        },
        "stackpointer": {
          "$ref": "#/$defs/stackpointeroffset"
        },
        "bytes": {
          "type": "string",
          "description": "hexadecimal representation of the instruction bytes"
        },
        "opcode": {
          "type": "array",
          "description": "standard assembly instruction representation, possibly broken in opcode part and operands part for better formatting",
          "items": {
            "type": "string"
          }
        },
        "annotation": {
          "type": "string",
          "description": "representation of instruction semantics using invariants"
        }
      }
    },
    "stackpointeroffset": {
      "name": "stackpointeroffset",
      "title": "stackpointer offset",
      "description": "value or range of values of the stack pointer relative to the value at the function entry, as determined by the analysis, or unknown",
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "description": "typically used for unknown value",
          "required": [
            "kind",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "unb-itv"
              ]
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "single (usually negative) value",
          "required": [
            "kind",
            "value",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "civ"
              ]
            },
            "value": {
              "type": "integer"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "closed interval specified by minimum and maximum value",
          "required": [
            "kind",
            "lb",
            "ub",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "itv"
              ]
            },
            "lb": {
              "type": "integer",
              "description": "lower-bound of offset value"
            },
            "ub": {
              "type": "integer",
              "description": "upper-bound of offset value"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "right open interval specified by lower bound",
          "required": [
            "kind",
            "lb",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "lb-itv"
              ]
            },
            "lb": {
              "type": "integer",
              "description": "lower-bound on offset value"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "descripotion": "left open interval specified by upper bound",
          "required": [
            "kind",
            "ub",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ub-itv"
              ]
            },
            "ub": {
              "type": "integer",
              "description": "upper-bound on offset value"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        }
      ]
    },
    "cfgedge": {
      "name": "cfgedge",
      "title": "control flow graph edge",
      "description": "Directed edge between two control flow graph nodes",
      "type": "object",
      "required": [
        "src",
        "tgt",
        "kind"
      ],
      "properties": {
        "src": {
          "type": "string",
          "description": "block address of source node"
        },
        "tgt": {
          "type": "string",
          "description": "block address of target node"
        },
        "kind": {
          "type": "string",
          "description": "true/false indicates conditional branch, table indicates jumptable, single indicates an edge always taken",
          "enum": [
            "true",
            "false",
            "table",
            "single"
          ]
        },
        "predicate": {
          "$ref": "#/$defs/xexpression"
        }
      }
    },
    "xexpression": {
      "name": "xexpression",
      "title": "symbolic expression",
      "description": "native representation expression",
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "description": "constant expression",
          "required": [
            "kind",
            "cst",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "xcst"
              ]
            },
            "cst": {
              "$ref": "#/$defs/xconstant"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "variable",
          "required": [
            "var",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "xvar"
              ]
            },
            "var": {
              "$ref": "#/$defs/xvariable"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "compound expression",
          "required": [
            "kind",
            "operator",
            "operands",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "xop"
              ]
            },
            "operator": {
              "type": "string",
              "description": "operation performed"
            },
            "operands": {
              "type": "array",
              "description": "list of operands (usually one or two)",
              "items": {
                "$ref": "#/$defs/xexpression"
              }
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        }
      ]
    },
    "xconstant": {
      "name": "xconstant",
      "title": "constant value",
      "description": "constant value in expression",
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "description": "integer constant",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "icst"
              ]
            },
            "value": {
              "type": "integer"
            }
          }
        },
        {
          "type": "object",
          "description": "integer constant string address",
          "required": [
            "kind",
            "value",
            "stringref"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "strcst"
              ]
            },
            "value": {
              "type": "integer"
            },
            "stringref": {
              "type": "string",
              "description": "string at numerical address"
            }
          }
        }
      ]
    },
    "xvariable": {
      "name": "xvariable",
      "title": "variable",
      "description": "variable with or without denotation",
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "description": "temporary variable without denotation",
          "required": [
            "kind",
            "temp",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "temp"
              ]
            },
            "temp": {
              "type": "string"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "memory variable",
          "required": [
            "kind",
            "base",
            "offset",
            "size",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "memvar"
              ]
            },
            "base": {
              "$ref": "#/$defs/memorybase"
            },
            "offset": {
              "$ref": "#/$defs/memoryoffset"
            },
            "size": {
              "type": "integer",
              "description": "size of variable in bytes"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "register variable",
          "required": [
            "kind",
            "register",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "regvar"
              ]
            },
            "register": {
              "type": "string",
              "description": "name of register"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "variable with a fixed (possibly symbolic) value",
          "required": [
            "kind",
            "fxdval",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "fxd"
              ]
            },
            "fxdval": {
              "$ref": "#/$defs/auxvariable"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        }
      ]
    },
    "memorybase": {
      "name": "memorybase",
      "title": "memory base",
      "description": "(symbolic) pointer to base of memory region",
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "description": "known base: function stack frame or global",
          "required": [
            "stack"
          ],
          "properties": {
            "stack": {
              "type": "string",
              "enum": [
                "local",
                "allocated",
                "realigned",
                "global"
              ]
            }
          }
        },
        {
          "type": "object",
          "description": "pointer contained in fixed-value variable",
          "required": [
            "ptrvar"
          ],
          "properties": {
            "ptrvar": {
              "$ref": "#/$defs/xvariable"
            }
          }
        },
        {
          "type": "object",
          "description": "global base or unknown",
          "required": [
            "other"
          ],
          "properties": {
            "other": {
              "type": "string",
              "enum": [
                "global",
                "unknown"
              ]
            }
          }
        }
      ]
    },
    "memoryoffset": {
      "name": "memoryoffset",
      "title": "memory offset",
      "description": "(possibly symbolic) offset in bytes from a memory base",
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "description": "no offset",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "none"
              ]
            }
          }
        },
        {
          "type": "object",
          "description": "constant numerical offset",
          "required": [
            "kind",
            "value",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "cv"
              ]
            },
            "value": {
              "type": "integer",
              "description": "offset value in bytes"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "constant numerical offset with suboffset",
          "required": [
            "kind",
            "value",
            "suboffset",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "cvo"
              ]
            },
            "value": {
              "type": "integer",
              "description": "offset value in bytes"
            },
            "suboffset": {
              "$ref": "#"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "index offset with variable and element size",
          "required": [
            "kind",
            "ixvar",
            "elsize",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "iv"
              ]
            },
            "ixvar": {
              "$ref": "#/$defs/xvariable"
            },
            "elsize": {
              "type": "integer",
              "description": "size of element indexed"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "index offset with suboffset",
          "required": [
            "kind",
            "ixvar",
            "elsize",
            "suboffset",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ivo"
              ]
            },
            "ixvar": {
              "$ref": "#/$defs/xvariable"
            },
            "elsize": {
              "type": "integer",
              "description": "size of element indexed"
            },
            "suboffset": {
              "$ref": "#"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        }
      ]
    },
    "auxvariable": {
      "name": "auxvariable",
      "title": "auxiliary variable",
      "description": "variable with a fixed symbolic value",
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "description": "value of the register upon function entry",
          "required": [
            "kind",
            "register",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "irv"
              ]
            },
            "register": {
              "type": "string",
              "description": "name of register"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "value of memory location upon function entry",
          "required": [
            "kind",
            "memvar",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "imv"
              ]
            },
            "memvar": {
              "$ref": "#/$defs/xvariable"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "value of variable frozen at test location",
          "required": [
            "kind",
            "testaddr",
            "jumpaddr",
            "testvar",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ftv"
              ]
            },
            "testaddr": {
              "type": "string",
              "description": "hex address of test location"
            },
            "jumpaddr": {
              "type": "string",
              "description": "hex address of conditional branch"
            },
            "testvar": {
              "$ref": "#/$defs/xvariable"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "value of return value from a function call",
          "required": [
            "kind",
            "callsite",
            "calltarget",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "frv"
              ]
            },
            "callsite": {
              "type": "string",
              "description": "hexaddress of function call site"
            },
            "calltarget": {
              "type": "string",
              "description": "name of function called"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "memory address",
          "required": [
            "kind",
            "base",
            "offset",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ma"
              ]
            },
            "base": {
              "$ref": "#/$defs/memorybase"
            },
            "offset": {
              "$ref": "#/$defs/memoryoffset"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        },
        {
          "type": "object",
          "description": "symbolic representation of expression",
          "required": [
            "kind",
            "expr",
            "txtrep"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "svx"
              ]
            },
            "expr": {
              "$ref": "#/$defs/xexpression"
            },
            "txtrep": {
              "type": "string",
              "description": "suggested textual representation"
            }
          }
        }
      ]
    },
    "cfgblockmappingitem": {
      "name": "cfgblockmappingitem",
      "title": "relationship between block in cfg1 and block(s) in cfg2",
      "description": "relationship between block in cfg1 and block(s) in cfg2",
      "type": "object",
      "properties": {
        "matches": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "md5",
              "instructioncount"
            ]
          }
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "md5",
              "trampoline-insertion",
              "instructioncount"
            ]
          }
        },
        "cfg1-block-addr": {
          "type": "string",
          "description": "hex address of block in cfg1"
        },
        "cfg2-blocks": {
          "type": "array",
          "description": "list of blocks address in cfg2 mapped to block in cfg1",
          "items": {
            "type": "object",
            "description": "block address and role",
            "properties": {
              "cfg2-block-addr": {
                "type": "string",
                "description": "hex address of block in cfg2"
              },
              "role": {
                "type": "string",
                "enum": [
                  "single-mapped",
                  "split-block-pre",
                  "split-block-post",
                  "trampoline-setup",
                  "trampoline-payload",
                  "trampoline-decision",
                  "trampoline-takedown",
                  "trampoline-breakout"
                ]
              }
            }
          }
        }
      }
    }
  }
}